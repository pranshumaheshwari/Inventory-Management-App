generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Attendance {
    number    Int       @default(0)
    date      DateTime  @id @default(now())
    createdAt DateTime? @default(now()) @map("created_at")

    @@map("attendance")
}

model Users {
    username           String               @id
    password           String
    type               UsersType
    name               String
    createdAt          DateTime?            @default(now()) @map("created_at")
    dispatch           Dispatch[]
    production         Production[]
    requisition        Requisition[]
    requisitionOutward RequisitionOutward[] @relation("requisition_outwardTousers")
    po                 Po[]
    invoice            Invoice[]
    inwardsPO          InwardsIQCPending[]
    inwardsIQC         InwardsVerified[]

    @@map("users")
}

model Supplier {
    id             String             @id
    name           String             @unique
    address1       String?
    address2       String?
    city           String
    state          String
    gst            String
    createdAt      DateTime?          @default(now()) @map("created_at")
    po             Po[]
    rm             Rm[]
    invoice        Invoice[]
    invoiceDetails InwardsPoPending[]

    @@map("supplier")
}

model Customer {
    id        String    @id
    name      String    @unique
    address1  String?
    address2  String?
    city      String
    state     String
    gst       String
    createdAt DateTime? @default(now()) @map("created_at")
    fg        Fg[]
    so        So[]

    @@map("customer")
}

model Rm {
    id                 String               @id
    description        String               @unique
    dtplCode           String               @unique @map("DTPL_code")
    supplierId         String               @map("supplier_id")
    category           RmCategory
    unit               String
    price              Float                @default(0.00)
    storeStock         Float                @default(0.00) @map("store_stock")
    iqcPendingStock    Float                @default(0.00) @map("iqc_pending_stock")
    iqcRejectedStock   Float                @default(0.00) @map("iqc_rejected_stock")
    poPendingStock     Float                @default(0.00) @map("po_pending_stock")
    poRejectedStock    Float                @default(0.00) @map("po_rejected_stock")
    lineStock          Float                @default(0.00) @map("line_stock")
    createdAt          DateTime?            @default(now()) @map("created_at")
    supplier           Supplier             @relation(fields: [supplierId], references: [id], onDelete: Restrict, onUpdate: Cascade)
    bom                Bom[]
    poDetails          PoDetails[]
    requisitionOutward RequisitionOutward[]
    rmProductionLog    RmProductionLog[]    @relation("rmTorm_production_log")
    inwardsPoPending   InwardsPoPending[]
    inwardsIQCPENDING  InwardsIQCPending[]
    inwardsVerified    InwardsVerified[]

    @@index([supplierId], name: "supplier_id")
    @@map("rm")
}

model Fg {
    id              String        @id
    customerId      String        @map("customer_id")
    description     String        @unique
    storeStock      Int           @default(0) @map("store_stock")
    oqcPendingStock Int           @default(0) @map("oqc_pending_stock")
    category        FgCategory
    price           Float         @default(0)
    manPower        Float         @default(0) @map("man_power")
    overheads       Float         @default(0)
    createdAt       DateTime?     @default(now()) @map("created_at")
    customer        Customer      @relation(fields: [customerId], references: [id], onDelete: Restrict, onUpdate: Cascade)
    bom             Bom[]
    dispatch        Dispatch[]
    production      Production[]
    requisition     Requisition[]
    soDetails       SoDetails[]

    @@index([customerId], name: "customer_id")
    @@map("fg")
}

model Bom {
    fgId      String    @map("fg_id")
    rmId      String    @map("rm_id")
    quantity  Float
    createdAt DateTime? @default(now()) @map("created_at")
    fg        Fg        @relation(fields: [fgId], references: [id], onDelete: Restrict, onUpdate: Cascade)
    rm        Rm        @relation(fields: [rmId], references: [id], onDelete: Restrict, onUpdate: Cascade)

    @@id([fgId, rmId])
    @@index([rmId], name: "rm_id")
    @@map("bom")
}

model Po {
    user       String
    id         String        @id
    supplierId String        @map("supplier_id")
    status     BinaryStatus? @default(Open)
    createdAt  DateTime?     @default(now()) @map("created_at")
    supplier   Supplier      @relation(fields: [supplierId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    poDetails  PoDetails[]
    users      Users         @relation(fields: [user], references: [username])
    invoicePO  InvoicePO[]

    @@index([supplierId], name: "supplier_id")
    @@map("po")
}

model PoDetails {
    poId      String    @map("po_id")
    rmId      String    @map("rm_id")
    price     Float
    quantity  Float
    createdAt DateTime? @default(now()) @map("created_at")
    po        Po        @relation(fields: [poId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    rm        Rm        @relation(fields: [rmId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@id([poId, rmId])
    @@index([rmId], name: "rm_id")
    @@map("po_details")
}

model Invoice {
    user           String
    id             String
    supplierId     String             @map("supplier_id")
    status         BinaryStatus?      @default(Open)
    createdAt      DateTime?          @default(now()) @map("created_at")
    supplier       Supplier           @relation(fields: [supplierId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    invoiceDetails InwardsPoPending[]
    users          Users              @relation(fields: [user], references: [username])
    invoicePO      InvoicePO[]

    @@id([id, supplierId])
    @@index([supplierId], name: "supplier_id")
    @@map("invoice")
}

model InwardsPoPending {
    id                Int                 @unique @default(autoincrement())
    invoiceId         String              @map("invoice_id")
    supplierId        String              @map("supplier_id")
    rmId              String              @map("rm_id")
    quantity          Float
    createdAt         DateTime?           @default(now()) @map("created_at")
    status            InwardsStatus       @default(PendingPoVerification)
    supplier          Supplier            @relation(fields: [supplierId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    rm                Rm                  @relation(fields: [rmId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    invoice           Invoice             @relation(fields: [invoiceId, supplierId], references: [id, supplierId])
    inwardsIQCPending InwardsIQCPending[]

    @@id([invoiceId, supplierId, rmId])
    @@index([rmId], name: "rm_id")
    @@index([supplierId], name: "supplier_id")
    @@map("inwards_po_pending")
}

model InvoicePO {
    id         Int     @id @default(autoincrement())
    supplierId String  @map("supplier_id")
    invoiceId  String  @map("invoice_id")
    poId       String  @map("po_id")
    invoice    Invoice @relation(fields: [invoiceId, supplierId], references: [id, supplierId])
    po         Po      @relation(fields: [poId], references: [id])

    @@map("invoice_po")
}

model InwardsIQCPending {
    id                 Int           @id @default(autoincrement())
    user               String
    status             InwardsStatus @default(PendingIqcVerification)
    inwardsPoPendingId Int           @map("inwards_po_id")
    rmId               String        @map("rm_id")
    quantity           Float

    users            Users             @relation(fields: [user], references: [username])
    inwardsPoPending InwardsPoPending  @relation(fields: [inwardsPoPendingId], references: [id])
    rm               Rm                @relation(fields: [rmId], references: [id])
    inwardsVerified  InwardsVerified[]

    @@map("inwards_iqc_pending")
}

model InwardsVerified {
    id                  Int           @id @default(autoincrement())
    user                String
    status              InwardsStatus @default(Accepted)
    inwardsIQCPendingId Int           @map("inwards_po_id")
    rmId                String        @map("rm_id")
    quantity            Float

    users             Users             @relation(fields: [user], references: [username])
    rm                Rm                @relation(fields: [rmId], references: [id])
    inwardsIQCPending InwardsIQCPending @relation(fields: [inwardsIQCPendingId], references: [id])

    @@map("inwards_verified")
}

model Requisition {
    id                 Int                  @id @default(autoincrement())
    user               String
    soId               String               @map("so_id")
    fgId               String               @map("fg_id")
    quantity           Float
    status             RequisitionStatus    @default(Ready)
    createdAt          DateTime?            @default(now()) @map("created_at")
    fg                 Fg                   @relation(fields: [fgId], references: [id])
    so                 So                   @relation("requisitionToso", fields: [soId], references: [id])
    users              Users                @relation(fields: [user], references: [username])
    requisitionOutward RequisitionOutward[] @relation("requisitionTorequisition_outward_requisition_id")

    @@index([fgId], name: "fg_id")
    @@index([soId], name: "so_id")
    @@map("requisition")
}

model RequisitionOutward {
    id                    Int         @id @default(autoincrement())
    user                  String
    requisitionId         Int         @map("requisition_id")
    rmId                  String      @map("rm_id")
    quantity              Float
    storeStockBefore      Float?      @map("store_stock_before")
    iqcPendingStockBefore Float?      @map("iqc_pending_stock_before")
    lineStockBefore       Float?      @map("line_stock_before")
    createdAt             DateTime?   @default(now()) @map("created_at")
    requisition           Requisition @relation("requisitionTorequisition_outward_requisition_id", fields: [requisitionId], references: [id])
    rm                    Rm          @relation(fields: [rmId], references: [id])
    users                 Users       @relation("requisition_outwardTousers", fields: [user], references: [username])

    @@index([requisitionId], name: "requisition_id")
    @@index([rmId], name: "rm_id")
    @@map("requisition_outward")
}

model Production {
    id               Int               @id @default(autoincrement())
    user             String
    soId             String            @map("so_id")
    fgId             String            @map("fg_id")
    quantity         Int
    storeStockBefore Float?            @map("store_stock_before")
    createdAt        DateTime?         @default(now()) @map("created_at")
    fg               Fg                @relation(fields: [fgId], references: [id])
    so               So                @relation("productionToso", fields: [soId], references: [id])
    users            Users             @relation(fields: [user], references: [username])
    rmProductionLog  RmProductionLog[]

    @@index([fgId], name: "fg_id")
    @@index([soId], name: "so_id")
    @@map("production")
}

model RmProductionLog {
    rmId                  String     @map("rm_id")
    productionId          Int        @map("production_id")
    storeStockBefore      Float?     @map("store_stock_before")
    iqcPendingStockBefore Float?     @map("iqc_pending_stock_before")
    lineStockBefore       Float?     @map("line_stock_before")
    production            Production @relation(fields: [productionId], references: [id])
    rm                    Rm         @relation("rmTorm_production_log", fields: [rmId], references: [id])

    @@id([rmId, productionId])
    @@index([productionId], name: "production_id")
    @@map("rm_production_log")
}

model Dispatch {
    user             String
    invoiceNumber    String             @map("invoice_number")
    soId             String             @map("so_id")
    fgId             String             @map("fg_id")
    quantity         Int
    oqcStatus        DispatchOqcStatus? @default(Pending)
    storeStockBefore Float?             @map("store_stock_before")
    createdAt        DateTime?          @default(now()) @map("created_at")
    fg               Fg                 @relation(fields: [fgId], references: [id])
    so               So                 @relation("dispatchToso", fields: [soId], references: [id])
    users            Users              @relation(fields: [user], references: [username])

    @@id([invoiceNumber, fgId])
    @@index([fgId], name: "fg_id")
    @@index([soId], name: "so_id")
    @@map("dispatch")
}

model So {
    id          String        @id
    customerId  String        @map("customer_id")
    status      BinaryStatus? @default(Open)
    createdAt   DateTime?     @default(now()) @map("created_at")
    customer    Customer      @relation(fields: [customerId], references: [id])
    dispatch    Dispatch[]    @relation("dispatchToso")
    production  Production[]  @relation("productionToso")
    requisition Requisition[] @relation("requisitionToso")
    soDetails   SoDetails[]

    @@index([customerId], name: "customer_id")
    @@map("so")
}

model SoDetails {
    soId      String    @map("so_id")
    fgId      String    @map("fg_id")
    quantity  Float
    createdAt DateTime? @default(now()) @map("created_at")
    fg        Fg        @relation(fields: [fgId], references: [id])
    so        So        @relation(fields: [soId], references: [id])

    @@id([soId, fgId])
    @@index([fgId], name: "fg_id")
    @@map("so_details")
}

enum DispatchOqcStatus {
    Pending
    Finished

    @@map("dispatch_oqc_status")
}

enum BinaryStatus {
    Open
    Closed

    @@map("binary_status")
}

enum InwardsStatus {
    Accepted
    PendingPoVerification
    PendingIqcVerification
    RejectedPoVerification
    RejectedIqcVerification
    Rejected
    Done

    @@map("inwards_status")
}

enum RequisitionStatus {
    Ready
    Running
    Closed

    @@map("requisition_status")
}

enum UsersType {
    admin
    store
    ppc
    production

    @@map("users_type")
}

enum RmCategory {
    Coil
    Connector
    Consumables
    Fuse
    Grommet
    Misc
    Sleeve
    Sticker
    Tape
    Terminal
    Wire
}

enum FgCategory {
    Fuse_Box
    Indicator
    Magneto
    Battery_Cable
    Lead_Wire
    Piaggio
    Pigtail
    SPD
}
