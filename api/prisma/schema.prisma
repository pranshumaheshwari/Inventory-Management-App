generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Attendance {
    id        Int       @id @default(autoincrement())
    number    Int
    date      DateTime  @default(now())
    createdAt DateTime? @default(now()) @map("created_at")

    @@map("attendance")
}

model Users {
    username             String                 @id
    password             String
    type                 UsersType
    name                 String
    createdAt            DateTime?              @default(now()) @map("created_at")
    dispatch             Dispatch[]
    production           Production[]
    requisition          Requisition[]
    requisitionOutward   RequisitionOutward[]
    po                   Po[]
    invoice              Invoice[]
    inwardsPO            InwardsIQCPending[]
    inwardsIQC           InwardsVerified[]
    outwardsQualityCheck OutwardsQualityCheck[]
    productionLog        ProductionLog[]
    rmManualUpdateLog    RmManualUpdateLog[]
    fgManualUpdateLog    FgManualUpdateLog[]
    requisitionDetails   RequisitionDetails[]

    @@map("users")
}

model Supplier {
    id             String           @id
    name           String           @unique
    address1       String?
    address2       String?
    city           String
    state          String
    gst            String
    createdAt      DateTime?        @default(now()) @map("created_at")
    po             Po[]
    rm             Rm[]
    invoice        Invoice[]
    invoiceDetails InvoiceDetails[]

    @@map("supplier")
}

model Customer {
    id        String    @id
    name      String    @unique
    address1  String?
    address2  String?
    city      String
    state     String
    gst       String
    createdAt DateTime? @default(now()) @map("created_at")
    fg        Fg[]
    so        So[]

    @@map("customer")
}

model Rm {
    id                      String                    @id
    description             String                    @unique
    dtplCode                String?                   @map("DTPL_code")
    supplierId              String                    @map("supplier_id")
    category                RmCategory
    unit                    String
    price                   Float                     @default(0.00)
    storeStock              Float                     @default(0.00) @map("store_stock")
    iqcPendingStock         Float                     @default(0.00) @map("iqc_pending_stock")
    iqcRejectedStock        Float                     @default(0.00) @map("iqc_rejected_stock")
    poPendingStock          Float                     @default(0.00) @map("po_pending_stock")
    poRejectedStock         Float                     @default(0.00) @map("po_rejected_stock")
    lineStock               Float                     @default(0.00) @map("line_stock")
    mpq                     Float                     @default(1.00)
    moq                     Float                     @default(0.00)
    createdAt               DateTime?                 @default(now()) @map("created_at")
    supplier                Supplier                  @relation(fields: [supplierId], references: [id], onDelete: Restrict, onUpdate: Cascade)
    bom                     Bom[]
    poDetails               PoDetails[]
    requisitionOutward      RequisitionOutward[]
    inwardsPoPending        InvoiceDetails[]
    inwardsIqcPending       InwardsIQCPending[]
    inwardsVerified         InwardsVerified[]
    productionLog           ProductionLog[]
    rmManualUpdateLog       RmManualUpdateLog[]
    requisitionDetails      RequisitionDetails[]
    requisitionExcessOnLine RequisitionExcessOnLine[]

    @@index([supplierId], name: "supplier_id")
    @@map("rm")
}

model Fg {
    id                   String                 @id
    customerId           String                 @map("customer_id")
    description          String                 @unique
    storeStock           Int                    @default(0) @map("store_stock")
    oqcPendingStock      Int                    @default(0) @map("oqc_pending_stock")
    oqcRejectedStock     Int                    @default(0) @map("oqc_rejected_stock")
    category             FgCategory
    price                Float                  @default(0)
    manPower             Float                  @default(0) @map("man_power")
    overheads            Float                  @default(0)
    createdAt            DateTime?              @default(now()) @map("created_at")
    customer             Customer               @relation(fields: [customerId], references: [id], onDelete: Restrict, onUpdate: Cascade)
    bom                  Bom[]
    dispatch             Dispatch[]
    production           Production[]
    requisition          Requisition[]
    soDetails            SoDetails[]
    outwardsQualityCheck OutwardsQualityCheck[]
    productionLog        ProductionLog[]
    fgManualUpdateLog    FgManualUpdateLog[]

    @@index([customerId], name: "customer_id")
    @@map("fg")
}

model Bom {
    fgId          String          @map("fg_id")
    rmId          String          @map("rm_id")
    quantity      Float
    createdAt     DateTime?       @default(now()) @map("created_at")
    fg            Fg              @relation(fields: [fgId], references: [id], onDelete: Restrict, onUpdate: Cascade)
    rm            Rm              @relation(fields: [rmId], references: [id], onDelete: Restrict, onUpdate: Cascade)
    productionLog ProductionLog[]

    @@id([fgId, rmId])
    @@index([rmId], name: "rm_id")
    @@map("bom")
}

model Po {
    user             String
    id               String           @id
    supplierId       String           @map("supplier_id")
    status           BinaryStatus?    @default(Open)
    createdAt        DateTime?        @default(now()) @map("created_at")
    supplier         Supplier         @relation(fields: [supplierId], references: [id], onDelete: Restrict, onUpdate: Cascade)
    poDetails        PoDetails[]
    users            Users            @relation(fields: [user], references: [username], onDelete: Restrict, onUpdate: Cascade)
    inwardsPoPending InvoiceDetails[]

    @@index([supplierId], name: "supplier_id")
    @@map("po")
}

model PoDetails {
    poId      String    @map("po_id")
    rmId      String    @map("rm_id")
    price     Float
    quantity  Float
    createdAt DateTime? @default(now()) @map("created_at")
    po        Po        @relation(fields: [poId], references: [id], onDelete: Restrict, onUpdate: Cascade)
    rm        Rm        @relation(fields: [rmId], references: [id], onDelete: Restrict, onUpdate: Cascade)

    @@id([poId, rmId])
    @@index([rmId], name: "rm_id")
    @@map("po_details")
}

model Invoice {
    user           String
    id             String
    supplierId     String           @map("supplier_id")
    status         BinaryStatus?    @default(Open)
    date           DateTime         @default(now())
    createdAt      DateTime?        @default(now()) @map("created_at")
    supplier       Supplier         @relation(fields: [supplierId], references: [id], onDelete: Restrict, onUpdate: Cascade)
    invoiceDetails InvoiceDetails[]
    users          Users            @relation(fields: [user], references: [username], onDelete: Restrict, onUpdate: Cascade)

    @@id([id, supplierId])
    @@index([supplierId], name: "supplier_id")
    @@map("invoice")
}

model InvoiceDetails {
    id                     Int       @unique @default(autoincrement())
    invoiceId              String    @map("invoice_id")
    supplierId             String    @map("supplier_id")
    rmId                   String    @map("rm_id")
    quantity               Float
    poId                   String    @map("po_id")
    createdAt              DateTime? @default(now()) @map("created_at")
    storeStockBefore       Float?    @map("store_stock_before")
    lineStockBefore        Float?    @map("line_stock_before")
    poPendingStockBefore   Float?    @map("po_pending_stock_before")
    iqcPendingStockBefore  Float?    @map("iqc_pending_stock_before")
    iqcRejectedStockBefore Float?    @map("iqc_rejected_stock_before")
    poRejectedStockBefore  Float?    @map("po_rejected_stock_before")

    status            InwardsStatus       @default(PendingPoVerification)
    supplier          Supplier            @relation(fields: [supplierId], references: [id], onDelete: Restrict, onUpdate: Cascade)
    rm                Rm                  @relation(fields: [rmId], references: [id], onDelete: Restrict, onUpdate: Cascade)
    invoice           Invoice             @relation(fields: [invoiceId, supplierId], references: [id, supplierId], onDelete: Restrict, onUpdate: Cascade)
    po                Po                  @relation(fields: [poId], references: [id], onDelete: Restrict, onUpdate: Cascade)
    inwardsIQCPending InwardsIQCPending[]

    @@id([invoiceId, supplierId, rmId])
    @@index([rmId], name: "rm_id")
    @@index([supplierId], name: "supplier_id")
    @@map("inwards_po_pending")
}

model InwardsIQCPending {
    id                     Int           @id @default(autoincrement())
    user                   String
    status                 InwardsStatus @default(PendingIqcVerification)
    inwardsPoPendingId     Int           @map("inwards_po_id")
    rmId                   String        @map("rm_id")
    quantity               Float
    createdAt              DateTime?     @default(now()) @map("created_at")
    storeStockBefore       Float?        @map("store_stock_before")
    lineStockBefore        Float?        @map("line_stock_before")
    poPendingStockBefore   Float?        @map("po_pending_stock_before")
    iqcPendingStockBefore  Float?        @map("iqc_pending_stock_before")
    iqcRejectedStockBefore Float?        @map("iqc_rejected_stock_before")
    poRejectedStockBefore  Float?        @map("po_rejected_stock_before")

    users            Users             @relation(fields: [user], references: [username], onDelete: Restrict, onUpdate: Cascade)
    inwardsPoPending InvoiceDetails    @relation(fields: [inwardsPoPendingId], references: [id], onDelete: Restrict, onUpdate: Cascade)
    rm               Rm                @relation(fields: [rmId], references: [id], onDelete: Restrict, onUpdate: Cascade)
    inwardsVerified  InwardsVerified[]

    @@map("inwards_iqc_pending")
}

model InwardsVerified {
    id                     Int           @id @default(autoincrement())
    user                   String
    status                 InwardsStatus @default(Accepted)
    inwardsIQCPendingId    Int           @map("inwards_po_id")
    rmId                   String        @map("rm_id")
    quantity               Float
    createdAt              DateTime?     @default(now()) @map("created_at")
    storeStockBefore       Float?        @map("store_stock_before")
    lineStockBefore        Float?        @map("line_stock_before")
    poPendingStockBefore   Float?        @map("po_pending_stock_before")
    iqcPendingStockBefore  Float?        @map("iqc_pending_stock_before")
    iqcRejectedStockBefore Float?        @map("iqc_rejected_stock_before")
    poRejectedStockBefore  Float?        @map("po_rejected_stock_before")

    users             Users             @relation(fields: [user], references: [username], onDelete: Restrict, onUpdate: Cascade)
    rm                Rm                @relation(fields: [rmId], references: [id], onDelete: Restrict, onUpdate: Cascade)
    inwardsIQCPending InwardsIQCPending @relation(fields: [inwardsIQCPendingId], references: [id], onDelete: Restrict, onUpdate: Cascade)

    @@map("inwards_verified")
}

model Requisition {
    id       Int    @id @default(autoincrement())
    user     String
    soId     String @map("so_id")
    fgId     String @map("fg_id")
    quantity Float

    createdAt          DateTime?            @default(now()) @map("created_at")
    fg                 Fg                   @relation(fields: [fgId], references: [id], onDelete: Restrict, onUpdate: Cascade)
    so                 So                   @relation(fields: [soId], references: [id], onDelete: Restrict, onUpdate: Cascade)
    users              Users                @relation(fields: [user], references: [username], onDelete: Restrict, onUpdate: Cascade)
    details            RequisitionDetails[]
    requisitionOutward RequisitionOutward[]

    @@index([fgId], name: "fg_id")
    @@index([soId], name: "so_id")
    @@map("requisition")
}

model RequisitionDetails {
    user          String
    requisitionId Int          @map("requisition_id")
    rmId          String       @map("rm_id")
    quantity      Float
    createdAt     DateTime?    @default(now()) @map("created_at")
    status        BinaryStatus @default(Open)

    requisition        Requisition          @relation(fields: [requisitionId], references: [id], onDelete: Restrict, onUpdate: Cascade)
    rm                 Rm                   @relation(fields: [rmId], references: [id], onDelete: Restrict, onUpdate: Cascade)
    users              Users                @relation(fields: [user], references: [username], onDelete: Restrict, onUpdate: Cascade)
    requisitionOutward RequisitionOutward[]

    @@id([requisitionId, rmId])
    @@map("requisition_details")
}

model RequisitionExcessOnLine {
    rmId      String    @id @map("rm_id")
    quantity  Float
    createdAt DateTime? @default(now()) @map("created_at")

    rm Rm @relation(fields: [rmId], references: [id], onDelete: Restrict, onUpdate: Cascade)

    @@map("requisition_excess_on_line")
}

model RequisitionOutward {
    id                     Int       @id @default(autoincrement())
    user                   String
    requisitionId          Int       @map("requisition_id")
    rmId                   String    @map("rm_id")
    quantity               Float
    createdAt              DateTime? @default(now()) @map("created_at")
    storeStockBefore       Float?    @map("store_stock_before")
    lineStockBefore        Float?    @map("line_stock_before")
    poPendingStockBefore   Float?    @map("po_pending_stock_before")
    iqcPendingStockBefore  Float?    @map("iqc_pending_stock_before")
    iqcRejectedStockBefore Float?    @map("iqc_rejected_stock_before")
    poRejectedStockBefore  Float?    @map("po_rejected_stock_before")

    requisition        Requisition        @relation(fields: [requisitionId], references: [id], onDelete: Restrict, onUpdate: Cascade)
    requisitionDetails RequisitionDetails @relation(fields: [requisitionId, rmId], references: [requisitionId, rmId], onDelete: Restrict, onUpdate: Cascade)
    rm                 Rm                 @relation(fields: [rmId], references: [id], onDelete: Restrict, onUpdate: Cascade)
    users              Users              @relation(fields: [user], references: [username], onDelete: Restrict, onUpdate: Cascade)

    @@index([requisitionId], name: "requisition_id")
    @@index([rmId], name: "rm_id")
    @@map("requisition_outward")
}

model Production {
    id                    Int            @id @default(autoincrement())
    user                  String
    soId                  String         @map("so_id")
    fgId                  String         @map("fg_id")
    quantity              Int
    storeStockBefore      Float?         @map("store_stock_before")
    oqcPendingStockBefore Float?         @map("oqc_pending_stock_before")
    createdAt             DateTime?      @default(now()) @map("created_at")
    status                OutwardsStatus @default(PendingOqcVerification)

    fg                   Fg                     @relation(fields: [fgId], references: [id], onDelete: Restrict, onUpdate: Cascade)
    so                   So                     @relation(fields: [soId], references: [id], onDelete: Restrict, onUpdate: Cascade)
    users                Users                  @relation(fields: [user], references: [username], onDelete: Restrict, onUpdate: Cascade)
    outwardsQualityCheck OutwardsQualityCheck[]
    productionLog        ProductionLog[]

    @@index([fgId], name: "fg_id")
    @@index([soId], name: "so_id")
    @@map("production")
}

model ProductionLog {
    productionId           Int       @map("production_id")
    user                   String
    fgId                   String    @map("fg_id")
    rmId                   String    @map("rm_id")
    quantity               Float
    createdAt              DateTime? @default(now()) @map("created_at")
    storeStockBefore       Float?    @map("store_stock_before")
    lineStockBefore        Float?    @map("line_stock_before")
    poPendingStockBefore   Float?    @map("po_pending_stock_before")
    iqcPendingStockBefore  Float?    @map("iqc_pending_stock_before")
    iqcRejectedStockBefore Float?    @map("iqc_rejected_stock_before")
    poRejectedStockBefore  Float?    @map("po_rejected_stock_before")

    fg         Fg         @relation(fields: [fgId], references: [id], onDelete: Restrict, onUpdate: Cascade)
    bom        Bom        @relation(fields: [rmId, fgId], references: [rmId, fgId], onDelete: Restrict, onUpdate: Cascade)
    production Production @relation(fields: [productionId], references: [id], onDelete: Restrict, onUpdate: Cascade)
    rm         Rm         @relation(fields: [rmId], references: [id], onDelete: Restrict, onUpdate: Cascade)
    users      Users      @relation(fields: [user], references: [username], onDelete: Restrict, onUpdate: Cascade)

    @@id([rmId, productionId])
    @@map("production_log")
}

model OutwardsQualityCheck {
    id                    Int            @id @default(autoincrement())
    user                  String
    productionId          Int            @map("production_id")
    fgId                  String         @map("fg_id")
    quantity              Int
    storeStockBefore      Float?         @map("store_stock_before")
    oqcPendingStockBefore Float?         @map("oqc_pending_stock_before")
    createdAt             DateTime?      @default(now()) @map("created_at")
    status                OutwardsStatus @default(Accepted)

    production Production @relation(fields: [productionId], references: [id], onDelete: Restrict, onUpdate: Cascade)
    fg         Fg         @relation(fields: [fgId], references: [id], onDelete: Restrict, onUpdate: Cascade)
    users      Users      @relation(fields: [user], references: [username], onDelete: Restrict, onUpdate: Cascade)

    @@map("outwards_quality_check")
}

model Dispatch {
    user          String
    invoiceNumber String @map("invoice_number")
    soId          String @map("so_id")
    fgId          String @map("fg_id")
    quantity      Int

    storeStockBefore      Float?    @map("store_stock_before")
    oqcPendingStockBefore Float?    @map("oqc_pending_stock_before")
    createdAt             DateTime? @default(now()) @map("created_at")

    fg       Fg        @relation(fields: [fgId], references: [id], onDelete: Restrict, onUpdate: Cascade)
    users    Users     @relation(fields: [user], references: [username], onDelete: Restrict, onUpdate: Cascade)
    so       So        @relation(fields: [soId], references: [id], onDelete: Restrict, onUpdate: Cascade)
    soDetail SoDetails @relation(fields: [soId, fgId], references: [soId, fgId], onDelete: Restrict, onUpdate: Cascade)

    @@id([invoiceNumber, fgId])
    @@index([fgId], name: "fg_id")
    @@map("dispatch")
}

model So {
    id          String        @id
    customerId  String        @map("customer_id")
    status      BinaryStatus? @default(Open)
    createdAt   DateTime?     @default(now()) @map("created_at")
    customer    Customer      @relation(fields: [customerId], references: [id], onDelete: Restrict, onUpdate: Cascade)
    production  Production[]
    requisition Requisition[]
    soDetails   SoDetails[]
    dispatch    Dispatch[]

    @@index([customerId], name: "customer_id")
    @@map("so")
}

model SoDetails {
    soId      String     @map("so_id")
    fgId      String     @map("fg_id")
    quantity  Float
    createdAt DateTime?  @default(now()) @map("created_at")
    fg        Fg         @relation(fields: [fgId], references: [id], onDelete: Restrict, onUpdate: Cascade)
    so        So         @relation(fields: [soId], references: [id], onDelete: Restrict, onUpdate: Cascade)
    dispatch  Dispatch[]

    @@id([soId, fgId])
    @@index([fgId], name: "fg_id")
    @@map("so_details")
}

model RmManualUpdateLog {
    id                     Int       @id @default(autoincrement())
    user                   String
    rmId                   String    @map("rm_id")
    storeStock             Float?    @map("store_stock")
    lineStock              Float?    @map("line_stock")
    createdAt              DateTime? @default(now()) @map("created_at")
    storeStockBefore       Float?    @map("store_stock_before")
    lineStockBefore        Float?    @map("line_stock_before")
    poPendingStockBefore   Float?    @map("po_pending_stock_before")
    iqcPendingStockBefore  Float?    @map("iqc_pending_stock_before")
    iqcRejectedStockBefore Float?    @map("iqc_rejected_stock_before")
    poRejectedStockBefore  Float?    @map("po_rejected_stock_before")

    rm    Rm    @relation(fields: [rmId], references: [id], onDelete: Restrict, onUpdate: Cascade)
    users Users @relation(fields: [user], references: [username], onDelete: Restrict, onUpdate: Cascade)

    @@map("rm_manual_update")
}

model FgManualUpdateLog {
    id              Int    @id @default(autoincrement())
    user            String
    fgId            String @map("fg_id")
    storeStock      Float? @map("store_stock")
    oqcPendingStock Float? @map("oqc_pending_stock")

    createdAt             DateTime? @default(now()) @map("created_at")
    storeStockBefore      Float?    @map("store_stock_before")
    oqcPendingStockBefore Float?    @map("oqc_pending_stock_before")

    fg    Fg    @relation(fields: [fgId], references: [id], onDelete: Restrict, onUpdate: Cascade)
    users Users @relation(fields: [user], references: [username], onDelete: Restrict, onUpdate: Cascade)

    @@map("fg_manual_update")
}

enum DispatchOqcStatus {
    Pending
    Finished

    @@map("dispatch_oqc_status")
}

enum BinaryStatus {
    Open
    Closed

    @@map("binary_status")
}

enum OutwardsStatus {
    Accepted
    PendingOqcVerification
    RejectedOqcVerification
    Rejected

    @@map("outwards_status")
}

enum InwardsStatus {
    Accepted
    PendingPoVerification
    PendingIqcVerification
    RejectedPoVerification
    RejectedIqcVerification
    Rejected
    Done

    @@map("inwards_status")
}

enum RequisitionStatus {
    Ready
    Running
    Closed

    @@map("requisition_status")
}

enum UsersType {
    admin
    ppc
    production
    store
    hr
    iqc
    oqc
    qa
    planthead
    mtnc

    @@map("users_type")
}

enum RmCategory {
    Coil
    Connector
    Consumables
    Fuse
    Grommet
    Misc
    Sleeve
    Sticker
    Tape
    Terminal
    Wire
}

enum FgCategory {
    Fuse_Box
    Indicator
    Magneto
    Battery_Cable
    Lead_Wire
    Piaggio
    Pigtail
    SPD
}
